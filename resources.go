// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZ30/bOhR+719h5fEiEq64SFeTW6TBqmkChIDt3U1OW2uOndlOAUX93yfHIb9/dLQUtvGCiM/nc+zj833HSfHpQ8jQCqSigo+df90jBwH3RUD5Yux8vZse/u+cTkaYSE19BpMRQlhTzWByLYUWvmDoXPhxCFwTTQXHnrWOEEoSSfgCkDulDNR6baYq8A3KmHNHSeJekRDW69JcMzsikiD3HJQvaWRmpS5Kfi9BKbLIXBfOEQ3GTpK405gx69ixLssRLwRftETti2tsdI7cz0RNKbBA5eNYkxkDNJckhLFDGMsD5iGxz4hSnISN6IUBWbe1BRkXCyniCPmCqbHzX8k5QtgMRuAb4z0N9HLs/ON4WyOO3JNh0HEdopdAgvIIQliK++oIQhi4lo+TdLfYsw/tkLvHCPoRF2QGrB9SOslWIPZqa8ReYyNYz0RQm1eq70o1DG68VPB968aM8u/I/AFeVLRJianorIrsI/YMbNLvz8ww2RqK28oAW/rnMCcx098Ii01Ug5tkYx9QktTtXgpIEuBBR9BG7k1aU3j1PKrZx55lRE5rLyVgQeGyh5y0nx40cCNzuyfuFSgNASoiDHD4ZB8cfhssz3OyLdM/EjWAuIrDGchXFoOWKhvM0SsJQtPfmeCaUE75oua5MPy66Nhj+atUB3uVi07ZVBQKj8P9XV12pXRpkofk7Xgf8ralLpm9/QZyYvO9cynZjpb7IlUHjbKHrrZefcnIy9u8hRwyWAHr7tOY8rmQIWG9bHnv5O+d/L2T/1GdvML7TcQnq5FbkCvqP+8TxMv38Jb+fQl6Kd7GN4YXFyy7VzTc6W/gRwxKo2HpugEVCa5gA+iL61N2lHsQpyw/NSXJRhsyYqmeWW+1BBJSvlivkUr/76Nz7xps5huLsMOdq7DmZy7jLd5+aoaSLrV+Xb31CSPS3tvTqq1yf/jG033fGeJ0i/1kCLBbe5NQjVPKTtqNpNCim9ZPFxOhTQK7AWcHB4NOvpAVGQRdP+ql4F2wWrk1pKMpHEXLSguiKhtdaXnqY+m3/hLrSs99ezCCYxI2iDqLoo28mcxtBLTZ64Q22Frnao2pVZ62XBdKlBxhL/+x5GcAAAD//x4vKjleGQAA",
	"html.tmpl": "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",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWz2+jOhC+81fMC+/wqor0XiU5vPZVT6u2qtpqL9Vq6yQTgmRsFptoK/D/vvIPsAnQVNrVXpYLnhk8zHzf54EYHkou+YZTuOabKkcmicw4ixYEGMlxOZO8mK0WF2QVRXEMz2RNEfgOrjiTyKSI6rokLEWY32QUhVJRXf+9yyh+1dvhcgnze5KjUgm81LVbf/kn7tZnEUCX4w6FIKlOA2A33HKWhptuKkrDjci2SoUp/mNV/lP7v0tkIuOsTaL7SigekIKPmWS+T6US7GITiZ+wPGSbsLfTdbX3BF6eNoSSEj4TWiE8vxWoaxDGmRy0M5HaeRZ9mBHPcVeLY3pRAKFZypazMkv3crZaENiXuFvOYiOHZ17o5xYXhVVFtz+q6/k1ik2ZFVpFSgXVeG57L/aNe5mZjJ650azZDub/E3GTId3qnA2YJTQGHGjglqyRQgPBTmiiBhJ9gb1D33QXNCGGOj8khsvGdwpNJy/9vpBGa5/Zp00V5vG6ZnxdQr8T28c17khFpeFWKXDmJZi+w5DTgymwrxCPSCjgqPGa9cj8S4S+3Vf5GssphIYodSBNo+XfPYpYDzBr6zlCMpax9Dhiy/s90NnQ4q8kAWRbyJ1UIUlWgYLdaPkF8m1Ah05x8AHATXOTYJ+CMABjCALqblsExrQVwDAxCUNIRsfon6vP14FAXycV6jnpUXCkTv99+ZhA3xHnHco937YafcRvFQrZsvOIouBMYGtPsnNMxLF5bDfht0IXMD12XUnH09e5gyFsSXD+J1kiyTOWKgXCrDvIXVbb2TCt9Y/ktYH3Ep86eAOOheOxpdedzziG4S+AJmte6D+4lo17LlFAA1fn563rEzmQdv3wJvecOWucrIAVGJ61kUNly/Jkheozf5cWsxlcrKDvcszqkrvzVhRhTNce2rb+1tOh8yMAAP//me02bccKAAA=",
	"scalars.json": "H4sIAAAAAAAA/9yXzW4aMRDH7zzFiFMqBZDSlEa9JZGQOOQEOUWp5GVnvW6NTewxzaqq1HfoG/ZJqt0F1gYvpChVk9zQfHg9v/nPWNx1AL53AAC6C6NJT4sFdj9BN9Uukdg9rV1KE9rSvDbMFot45MzG7XxzciY1o+H52vGFLVk8ZZEvgpyNvaBcq6jLuKRYO0aVowPw47SlxiB1X4lBYFNhYN4q8P1ZrMCwjn9dn1DeNTb13Vq0sGRGsERiT6LilAOqmU6F4n0YK8wyMROoCDJtNh5QyBmJJYJy8wSNhd8/f4HIoNDOQCZQpiAsSPEVZQGkIWdl7DppyaRDewrOItjqYiCUJWRpPwI8uHkDXKgI7iDWh+1Fe6iFIuRo4rC9FB/1leDKzUEbGInH8tcJs2DwwQmD6btDPWi0/sJ6MDw/0IPm5k0PpFY82oT4SPvhu10YWDLCC9huxsBP3+3IXvLuGPlHOLgWMbqoGt0zy/EAgaM06Y4RZQuZmERcXCPu/4jkKET2qN05EVxhCkJRPWt9mOZoEebaIGxGWhZ1Cu6OM+VMgUHuJDNQXcG+7fVoj9qPz855eN7G+VWvwEw8YhqR8aX8xgoLWflqJAWh7cNNgK4G5FbvdLZ6OYAZBJ0RKuAGGaGp484+n128vM35zEqtWEakumKJgud0CGb54B6G+WH4epft/mF/uh7f9tL7Cy29wa2UaC2f8q/Lj2vK9K08eqZfZWlHpiKFbnuCCrecfoFT4/BaMmsHIyZt/XN/twOSTa+hdsDcWQJWd36mFTGh4HY66l2sXq+01NjHXiIILifX4zEQPlJMF+GHGmKhnbdczKc2CZuft3wiZGbJDJwS5ZVj3Ooz4aQqbf98VMrfAXbDig0fpgpgJhFkmCnA4oNDNSvXafvUtNG5KggnLYTu7svjYoR2s55OaR+dqsO9i6vxtEbUue/8CQAA//8z+wC/ohEAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
